import java.util.*;

public class LFUCache {
    private final int capacity;
    private int minFreq;
    private final Map<Integer, Integer> keyToValue;
    private final Map<Integer, Integer> keyToFreq;
    private final Map<Integer, LinkedHashSet<Integer>> freqToKeys;

    public LFUCache(int capacity) {
        this.capacity = capacity;
        this.minFreq = 0;
        this.keyToValue = new HashMap<>();
        this.keyToFreq = new HashMap<>();
        this.freqToKeys = new HashMap<>();
    }

    public int get(int key) {
        if (!keyToValue.containsKey(key)) return -1;

        // Increase frequency
        int freq = keyToFreq.get(key);
        keyToFreq.put(key, freq + 1);
        freqToKeys.get(freq).remove(key);

        // Update minFreq if needed
        if (freqToKeys.get(freq).isEmpty()) {
            freqToKeys.remove(freq);
            if (minFreq == freq) minFreq++;
        }

        freqToKeys.computeIfAbsent(freq + 1, k -> new LinkedHashSet<>()).add(key);
        return keyToValue.get(key);
    }

    public void put(int key, int value) {
        if (capacity == 0) return;

        if (keyToValue.containsKey(key)) {
            keyToValue.put(key, value);
            get(key); // increase freq
            return;
        }

        // Evict if full
        if (keyToValue.size() >= capacity) {
            LinkedHashSet<Integer> keys = freqToKeys.get(minFreq);
            int evictKey = keys.iterator().next();
            keys.remove(evictKey);
            if (keys.isEmpty()) {
                freqToKeys.remove(minFreq);
            }
            keyToValue.remove(evictKey);
            keyToFreq.remove(evictKey);
        }

        // Add new key
        keyToValue.put(key, value);
        keyToFreq.put(key, 1);
        freqToKeys.computeIfAbsent(1, k -> new LinkedHashSet<>()).add(key);
        minFreq = 1;
    }

    // Main method to test
    public static void main(String[] args) {
        LFUCache lfu = new LFUCache(2);

        lfu.put(1, 1);   // cache=[1,_], cnt(1)=1
        lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1
        System.out.println(lfu.get(1));  // return 1
        lfu.put(3, 3);   // evicts key 2
        System.out.println(lfu.get(2));  // return -1
        System.out.println(lfu.get(3));  // return 3
        lfu.put(4, 4);   // evicts key 1
        System.out.println(lfu.get(1));  // return -1
        System.out.println(lfu.get(3));  // return 3
        System.out.println(lfu.get(4));  // return 4
    }
}
