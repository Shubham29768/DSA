public class Main {
    public static void convertToMaxHeap(int[] nums) {
        int n = nums.length;

        // Start from last non-leaf node and heapify each one
        for (int i = (n - 2) / 2; i >= 0; i--) {
            maxHeapify(nums, n, i);
        }
    }

    private static void maxHeapify(int[] nums, int n, int i) {
        int largest = i;
        int left = 2*i + 1;
        int right = 2*i + 2;

        if (left < n && nums[left] > nums[largest])
            largest = left;

        if (right < n && nums[right] > nums[largest])
            largest = right;

        if (largest != i) {
            int temp = nums[i];
            nums[i] = nums[largest];
            nums[largest] = temp;

            maxHeapify(nums, n, largest);
        }
    }

    public static void main(String[] args) {
        int[] nums1 = {10, 20, 30, 21, 23};
        convertToMaxHeap(nums1);
        System.out.println(java.util.Arrays.toString(nums1)); // [30, 21, 23, 10, 20]

        int[] nums2 = {-5, -4, -3, -2, -1};
        convertToMaxHeap(nums2);
        System.out.println(java.util.Arrays.toString(nums2)); // [-1, -2, -3, -4, -5]
    }
}
