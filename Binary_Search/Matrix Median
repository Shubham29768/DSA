import java.util.Arrays;

public class MatrixMedian {

    // Function to count elements <= mid in a row
    private static int countLessOrEqual(int[] row, int mid) {
        int low = 0, high = row.length - 1;
        while (low <= high) {
            int m = (low + high) / 2;
            if (row[m] <= mid)
                low = m + 1;
            else
                high = m - 1;
        }
        return low;
    }

    // Main function to find median
    public static int findMedian(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int low = Integer.MAX_VALUE;
        int high = Integer.MIN_VALUE;

        // Find the global min and max of the matrix
        for (int i = 0; i < rows; i++) {
            low = Math.min(low, matrix[i][0]);
            high = Math.max(high, matrix[i][cols - 1]);
        }

        int desired = (rows * cols + 1) / 2;

        // Binary search on the value range
        while (low < high) {
            int mid = (low + high) / 2;
            int count = 0;

            for (int i = 0; i < rows; i++) {
                count += countLessOrEqual(matrix[i], mid);
            }

            if (count < desired)
                low = mid + 1;
            else
                high = mid;
        }

        return low;
    }

    public static void main(String[] args) {
        int[][] matrix1 = {
            {1, 4, 9},
            {2, 5, 6},
            {3, 7, 8}
        };
        System.out.println(findMedian(matrix1)); // Output: 5

        int[][] matrix2 = {
            {1, 3, 8},
            {2, 3, 4},
            {1, 2, 5}
        };
        System.out.println(findMedian(matrix2)); // Output: 3
    }
}
