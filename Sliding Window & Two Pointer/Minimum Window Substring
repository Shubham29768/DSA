import java.util.HashMap;
import java.util.Map;

public class Main {

    public static String minWindow(String s, String t) {
        if (s.length() < t.length()) return "";

        // Frequency map for characters in t
        Map<Character, Integer> tMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }

        int required = tMap.size();
        int formed = 0;
        Map<Character, Integer> windowCounts = new HashMap<>();

        int left = 0, right = 0;
        int minLen = Integer.MAX_VALUE;
        int minLeft = 0;

        while (right < s.length()) {
            char c = s.charAt(right);
            windowCounts.put(c, windowCounts.getOrDefault(c, 0) + 1);

            if (tMap.containsKey(c) && windowCounts.get(c).intValue() == tMap.get(c).intValue()) {
                formed++;
            }

            // Try to contract the window
            while (left <= right && formed == required) {
                if ((right - left + 1) < minLen) {
                    minLen = right - left + 1;
                    minLeft = left;
                }

                char ch = s.charAt(left);
                windowCounts.put(ch, windowCounts.get(ch) - 1);
                if (tMap.containsKey(ch) && windowCounts.get(ch) < tMap.get(ch)) {
                    formed--;
                }
                left++;
            }

            right++;
        }

        return minLen == Integer.MAX_VALUE ? "" : s.substring(minLeft, minLeft + minLen);
    }

    public static void main(String[] args) {
        String s1 = "ADOBECODEBANC", t1 = "ABC";
        System.out.println("Output 1: " + minWindow(s1, t1)); // "BANC"

        String s2 = "a", t2 = "a";
        System.out.println("Output 2: " + minWindow(s2, t2)); // "a"

        String s3 = "a", t3 = "aa";
        System.out.println("Output 3: " + minWindow(s3, t3)); // ""
    }
}
