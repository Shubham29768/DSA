import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class InorderTraversal {

    // Recursive inorder traversal
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        inorderHelper(root, result);
        return result;
    }

    private void inorderHelper(TreeNode node, List<Integer> result) {
        if (node == null) return;
        inorderHelper(node.left, result);   // Visit left
        result.add(node.val);               // Visit root
        inorderHelper(node.right, result);  // Visit right
    }

    // Example usage
    public static void main(String[] args) {
        InorderTraversal it = new InorderTraversal();

        // Example 1: [1,null,2,3]
        TreeNode root1 = new TreeNode(1);
        root1.right = new TreeNode(2);
        root1.right.left = new TreeNode(3);
        System.out.println("Example 1: " + it.inorderTraversal(root1)); // Output: [1, 3, 2]

        // Example 2: [1,2,3,4,5,null,8,null,null,6,7,9]
        TreeNode root2 = new TreeNode(1);
        root2.left = new TreeNode(2);
        root2.right = new TreeNode(3);
        root2.left.left = new TreeNode(4);
        root2.left.right = new TreeNode(5);
        root2.left.right.left = new TreeNode(6);
        root2.left.right.right = new TreeNode(7);
        root2.right.right = new TreeNode(8);
        root2.right.right.left = new TreeNode(9);
        System.out.println("Example 2: " + it.inorderTraversal(root2)); // Output: [4, 2, 6, 5, 7, 1, 3, 9, 8]

        // Example 3: []
        TreeNode root3 = null;
        System.out.println("Example 3: " + it.inorderTraversal(root3)); // Output: []

        // Example 4: [1]
        TreeNode root4 = new TreeNode(1);
        System.out.println("Example 4: " + it.inorderTraversal(root4)); // Output: [1]
    }
}
