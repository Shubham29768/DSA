import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {}

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;
        return isMirror(root.left, root.right);
    }

    private boolean isMirror(TreeNode t1, TreeNode t2) {
        if (t1 == null && t2 == null) return true;
        if (t1 == null || t2 == null) return false;
        return (t1.val == t2.val)
                && isMirror(t1.left, t2.right)
                && isMirror(t1.right, t2.left);
    }

    // Test the method
    public static void main(String[] args) {
        Solution sol = new Solution();

        // Example 1: [1,2,2,3,4,4,3]
        TreeNode root1 = new TreeNode(1,
                          new TreeNode(2, new TreeNode(3), new TreeNode(4)),
                          new TreeNode(2, new TreeNode(4), new TreeNode(3)));
        System.out.println("Example 1: " + sol.isSymmetric(root1)); // true

        // Example 2: [1,2,2,null,3,null,3]
        TreeNode root2 = new TreeNode(1,
                          new TreeNode(2, null, new TreeNode(3)),
                          new TreeNode(2, null, new TreeNode(3)));
        System.out.println("Example 2: " + sol.isSymmetric(root2)); // false
    }
}
