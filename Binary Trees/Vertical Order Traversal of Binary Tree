import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {}

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    // Helper class to hold node info
    class Tuple {
        TreeNode node;
        int row, col;

        public Tuple(TreeNode node, int row, int col) {
            this.node = node;
            this.row = row;
            this.col = col;
        }
    }

    public List<List<Integer>> verticalTraversal(TreeNode root) {
        // TreeMap for vertical columns: col -> row -> list of values
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        Queue<Tuple> queue = new LinkedList<>();

        queue.offer(new Tuple(root, 0, 0));

        while (!queue.isEmpty()) {
            Tuple t = queue.poll();
            TreeNode node = t.node;
            int row = t.row, col = t.col;

            // Add node value to map
            map.putIfAbsent(col, new TreeMap<>());
            map.get(col).putIfAbsent(row, new PriorityQueue<>());
            map.get(col).get(row).offer(node.val);

            if (node.left != null)
                queue.offer(new Tuple(node.left, row + 1, col - 1));
            if (node.right != null)
                queue.offer(new Tuple(node.right, row + 1, col + 1));
        }

        // Prepare result list
        List<List<Integer>> result = new ArrayList<>();

        for (TreeMap<Integer, PriorityQueue<Integer>> rows : map.values()) {
            List<Integer> colList = new ArrayList<>();
            for (PriorityQueue<Integer> nodes : rows.values()) {
                while (!nodes.isEmpty()) {
                    colList.add(nodes.poll());
                }
            }
            result.add(colList);
        }

        return result;
    }

    // Test the solution
    public static void main(String[] args) {
        Solution sol = new Solution();

        // Example 1: [3,9,20,null,null,15,7]
        TreeNode root1 = new TreeNode(3);
        root1.left = new TreeNode(9);
        root1.right = new TreeNode(20, new TreeNode(15), new TreeNode(7));
        System.out.println("Example 1: " + sol.verticalTraversal(root1)); // [[9], [3,15], [20], [7]]

        // Example 2: [1,2,3,4,5,6,7]
        TreeNode root2 = new TreeNode(1,
                          new TreeNode(2, new TreeNode(4), new TreeNode(5)),
                          new TreeNode(3, new TreeNode(6), new TreeNode(7)));
        System.out.println("Example 2: " + sol.verticalTraversal(root2)); // [[4], [2], [1,5,6], [3], [7]]

        // Example 3: [1,2,3,4,6,5,7]
        TreeNode root3 = new TreeNode(1,
                          new TreeNode(2, new TreeNode(4), new TreeNode(6)),
                          new TreeNode(3, new TreeNode(5), new TreeNode(7)));
        System.out.println("Example 3: " + sol.verticalTraversal(root3)); // [[4], [2], [1,5,6], [3], [7]]
    }
}
