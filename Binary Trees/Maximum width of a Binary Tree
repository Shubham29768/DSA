import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int x) {
        val = x;
    }
}

public class MaximumWidthBinaryTree {

    // Class to keep track of node with its index in a complete binary tree
    class NodeIndex {
        TreeNode node;
        int index;

        NodeIndex(TreeNode node, int index) {
            this.node = node;
            this.index = index;
        }
    }

    public int widthOfBinaryTree(TreeNode root) {
        if (root == null) return 0;

        int maxWidth = 0;
        Queue<NodeIndex> queue = new LinkedList<>();
        queue.offer(new NodeIndex(root, 0));

        while (!queue.isEmpty()) {
            int size = queue.size();
            int minIndex = queue.peek().index; // index of first node at this level
            int first = 0, last = 0;

            for (int i = 0; i < size; i++) {
                NodeIndex current = queue.poll();
                int index = current.index - minIndex; // Normalize to avoid overflow

                if (i == 0) first = index;
                if (i == size - 1) last = index;

                if (current.node.left != null)
                    queue.offer(new NodeIndex(current.node.left, 2 * index + 1));
                if (current.node.right != null)
                    queue.offer(new NodeIndex(current.node.right, 2 * index + 2));
            }

            maxWidth = Math.max(maxWidth, last - first + 1);
        }

        return maxWidth;
    }

    // Example usage:
    public static void main(String[] args) {
        /*
            Example 1 tree:
                    1
                  /   \
                 3     2
                / \     \
               5   3     9
        */
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(3);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(5);
        root.left.right = new TreeNode(3);
        root.right.right = new TreeNode(9);

        MaximumWidthBinaryTree sol = new MaximumWidthBinaryTree();
        System.out.println("Maximum Width: " + sol.widthOfBinaryTree(root));  // Output: 4
    }
}
