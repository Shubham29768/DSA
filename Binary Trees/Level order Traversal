import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class LevelOrderTraversal {

    // Level order traversal using BFS
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>();

            // Process all nodes at the current level
            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();
                currentLevel.add(node.val);

                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }

            result.add(currentLevel);
        }

        return result;
    }

    // Example usage
    public static void main(String[] args) {
        LevelOrderTraversal lot = new LevelOrderTraversal();

        // Example 1: [3,9,20,null,null,15,7]
        TreeNode root1 = new TreeNode(3);
        root1.left = new TreeNode(9);
        root1.right = new TreeNode(20);
        root1.right.left = new TreeNode(15);
        root1.right.right = new TreeNode(7);
        System.out.println("Example 1: " + lot.levelOrder(root1)); // Output: [[3], [9, 20], [15, 7]]

        // Example 2: [1]
        TreeNode root2 = new TreeNode(1);
        System.out.println("Example 2: " + lot.levelOrder(root2)); // Output: [[1]]

        // Example 3: []
        TreeNode root3 = null;
        System.out.println("Example 3: " + lot.levelOrder(root3)); // Output: []
    }
}
