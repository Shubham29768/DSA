public class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int n = arr.length;
        int[] dp = new int[n + 1];  // dp[i] = max sum for arr[0..i-1]

        for (int i = 1; i <= n; i++) {
            int maxVal = 0;
            // Try all partitions ending at i with length <= k
            for (int j = 1; j <= k && i - j >= 0; j++) {
                maxVal = Math.max(maxVal, arr[i - j]);
                dp[i] = Math.max(dp[i], dp[i - j] + maxVal * j);
            }
        }
        return dp[n];
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        System.out.println(sol.maxSumAfterPartitioning(new int[]{1,15,7,9,2,5,10}, 3)); // Output: 84
        System.out.println(sol.maxSumAfterPartitioning(new int[]{1,4,1,5,7,3,6,1,9,9,3}, 4)); // Output: 83
        System.out.println(sol.maxSumAfterPartitioning(new int[]{1}, 1)); // Output: 1
    }
}
