public class WildcardMatching {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();

        // dp[i][j] means s[0..i-1] matches p[0..j-1]
        boolean[][] dp = new boolean[m + 1][n + 1];

        // Empty string and empty pattern match
        dp[0][0] = true;

        // Fill first row (s is empty)
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 1]; // '*' matches empty sequence
            }
        }

        // Fill rest of the table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char sc = s.charAt(i - 1);
                char pc = p.charAt(j - 1);

                if (pc == '*') {
                    // '*' matches empty or any char
                    dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
                } else if (pc == '?' || sc == pc) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }

        return dp[m][n];
    }

    public static void main(String[] args) {
        WildcardMatching wm = new WildcardMatching();

        System.out.println(wm.isMatch("aa", "a"));       // false
        System.out.println(wm.isMatch("aa", "*"));       // true
        System.out.println(wm.isMatch("cb", "?a"));      // false
        System.out.println(wm.isMatch("adceb", "*a*b")); // true
        System.out.println(wm.isMatch("acdcb", "a*c?b")); // false
    }
}
