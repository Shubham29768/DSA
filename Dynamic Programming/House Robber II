public class HouseRobberII {

    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int n = nums.length;
        
        if (n == 1) return nums[0];
        if (n == 2) return Math.max(nums[0], nums[1]);

        // Case 1: Rob houses from 0 to n-2 (exclude last)
        int max1 = robLinear(nums, 0, n - 2);
        // Case 2: Rob houses from 1 to n-1 (exclude first)
        int max2 = robLinear(nums, 1, n - 1);

        return Math.max(max1, max2);
    }

    // Helper function for normal House Robber (linear version)
    private int robLinear(int[] nums, int start, int end) {
        int prev1 = 0, prev2 = 0;

        for (int i = start; i <= end; i++) {
            int temp = prev1;
            prev1 = Math.max(prev2 + nums[i], prev1);
            prev2 = temp;
        }

        return prev1;
    }

    // Test cases
    public static void main(String[] args) {
        HouseRobberII solver = new HouseRobberII();
        
        int[] nums1 = {2, 3, 2};
        int[] nums2 = {1, 2, 3, 1};
        int[] nums3 = {1, 2, 3};

        System.out.println(solver.rob(nums1)); // Output: 3
        System.out.println(solver.rob(nums2)); // Output: 4
        System.out.println(solver.rob(nums3)); // Output: 3
    }
}
