import java.util.*;

public class LargestDivisibleSubset {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);

        int[] dp = new int[n];
        int[] prev = new int[n]; // to reconstruct path
        Arrays.fill(dp, 1);
        Arrays.fill(prev, -1);

        int maxSize = 1;
        int maxIndex = 0;

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    prev[i] = j;
                }
            }
            if (dp[i] > maxSize) {
                maxSize = dp[i];
                maxIndex = i;
            }
        }

        // Reconstruct subset
        List<Integer> result = new ArrayList<>();
        int curr = maxIndex;
        while (curr != -1) {
            result.add(nums[curr]);
            curr = prev[curr];
        }
        Collections.reverse(result);
        return result;
    }

    public static void main(String[] args) {
        LargestDivisibleSubset solver = new LargestDivisibleSubset();

        System.out.println(solver.largestDivisibleSubset(new int[]{1,2,3}));       // Output: [1,2] or [1,3]
        System.out.println(solver.largestDivisibleSubset(new int[]{1,2,4,8}));     // Output: [1,2,4,8]
    }
}
