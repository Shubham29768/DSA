import java.util.Stack;

public class MaximalRectangle {

    public int maximalRectangle(char[][] matrix) {
        if (matrix.length == 0) return 0;
        int maxArea = 0;
        int cols = matrix[0].length;
        int[] heights = new int[cols];

        // For each row, build histogram and calculate max rectangle
        for (char[] row : matrix) {
            for (int j = 0; j < cols; j++) {
                // If current cell is '1', increase height
                if (row[j] == '1') {
                    heights[j]++;
                } else {
                    heights[j] = 0;
                }
            }
            maxArea = Math.max(maxArea, largestRectangleArea(heights));
        }

        return maxArea;
    }

    private int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        int[] newHeights = new int[heights.length + 1]; // add zero at end
        System.arraycopy(heights, 0, newHeights, 0, heights.length);

        for (int i = 0; i < newHeights.length; i++) {
            while (!stack.isEmpty() && newHeights[i] < newHeights[stack.peek()]) {
                int height = newHeights[stack.pop()];
                int width = stack.isEmpty() ? i : i - stack.peek() - 1;
                maxArea = Math.max(maxArea, height * width);
            }
            stack.push(i);
        }

        return maxArea;
    }

    // Test
    public static void main(String[] args) {
        MaximalRectangle solver = new MaximalRectangle();
        char[][] matrix1 = {
            {'1','0','1','0','0'},
            {'1','0','1','1','1'},
            {'1','1','1','1','1'},
            {'1','0','0','1','0'}
        };
        System.out.println("Max area: " + solver.maximalRectangle(matrix1)); // Output: 6

        char[][] matrix2 = {{'0'}};
        System.out.println("Max area: " + solver.maximalRectangle(matrix2)); // Output: 0

        char[][] matrix3 = {{'1'}};
        System.out.println("Max area: " + solver.maximalRectangle(matrix3)); // Output: 1
    }
}
