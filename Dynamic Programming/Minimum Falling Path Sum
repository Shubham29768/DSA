public class MinFallingPathSum {

    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;

        for (int i = n - 2; i >= 0; i--) {
            for (int j = 0; j < n; j++) {
                int down = matrix[i + 1][j];
                int left = j > 0 ? matrix[i + 1][j - 1] : Integer.MAX_VALUE;
                int right = j < n - 1 ? matrix[i + 1][j + 1] : Integer.MAX_VALUE;

                matrix[i][j] += Math.min(down, Math.min(left, right));
            }
        }

        // Return the minimum value in the first row
        int minSum = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            minSum = Math.min(minSum, matrix[0][j]);
        }

        return minSum;
    }

    // Test the code
    public static void main(String[] args) {
        MinFallingPathSum solver = new MinFallingPathSum();

        int[][] matrix1 = {{2, 1, 3}, {6, 5, 4}, {7, 8, 9}};
        int[][] matrix2 = {{-19, 57}, {-40, -5}};

        System.out.println(solver.minFallingPathSum(matrix1)); // Output: 13
        System.out.println(solver.minFallingPathSum(matrix2)); // Output: -59
    }
}
