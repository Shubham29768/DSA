public class LongestPalindromicSubsequence {
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        // dp[i][j] = length of longest palindromic subsequence in s[i..j]
        int[][] dp = new int[n][n];

        // A single character is always a palindrome of length 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        // Fill the DP table from shorter substrings to longer ones
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = (len == 2) ? 2 : dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[0][n - 1]; // The result for the full string
    }

    // Example usage
    public static void main(String[] args) {
        LongestPalindromicSubsequence lps = new LongestPalindromicSubsequence();

        String s1 = "bbbab";
        System.out.println("Longest Palindromic Subsequence Length: " + lps.longestPalindromeSubseq(s1)); // Output: 4

        String s2 = "cbbd";
        System.out.println("Longest Palindromic Subsequence Length: " + lps.longestPalindromeSubseq(s2)); // Output: 2
    }
}
