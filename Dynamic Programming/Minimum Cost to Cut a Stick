import java.util.Arrays;

public class MinCostToCutStick {
    public int minCost(int n, int[] cuts) {
        int m = cuts.length;
        int[] cutsSorted = new int[m + 2];
        System.arraycopy(cuts, 0, cutsSorted, 1, m);
        cutsSorted[0] = 0;
        cutsSorted[m + 1] = n;
        Arrays.sort(cutsSorted);

        int[][] dp = new int[m + 2][m + 2];

        // length represents the distance between i and j in cutsSorted
        for (int length = 2; length <= m + 1; length++) {
            for (int i = 0; i + length <= m + 1; i++) {
                int j = i + length;
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = i + 1; k < j; k++) {
                    int cost = cutsSorted[j] - cutsSorted[i] + dp[i][k] + dp[k][j];
                    dp[i][j] = Math.min(dp[i][j], cost);
                }
                if (dp[i][j] == Integer.MAX_VALUE) {
                    dp[i][j] = 0;  // no cuts in this segment
                }
            }
        }

        return dp[0][m + 1];
    }

    public static void main(String[] args) {
        MinCostToCutStick solver = new MinCostToCutStick();

        System.out.println(solver.minCost(7, new int[]{1, 3, 4, 5})); // Output: 16
        System.out.println(solver.minCost(9, new int[]{5, 6, 1, 4, 2})); // Output: 22
    }
}
