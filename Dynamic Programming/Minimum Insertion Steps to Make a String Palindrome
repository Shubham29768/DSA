public class MinInsertionsPalindrome {
    // Function to compute minimum insertions
    public int minInsertions(String s) {
        int lpsLength = longestPalindromeSubseq(s);
        return s.length() - lpsLength;
    }

    // Function to compute Longest Palindromic Subsequence
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];

        // Every single character is a palindrome of length 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        // Build the table from shorter substrings to longer
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = (len == 2) ? 2 : dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[0][n - 1];
    }

    // Main method to test
    public static void main(String[] args) {
        MinInsertionsPalindrome mip = new MinInsertionsPalindrome();

        System.out.println("Insertions needed: " + mip.minInsertions("zzazz"));     // Output: 0
        System.out.println("Insertions needed: " + mip.minInsertions("mbadm"));     // Output: 2
        System.out.println("Insertions needed: " + mip.minInsertions("leetcode"));  // Output: 5
    }
}
