class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class ReverseKGroup {

    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1) return head;

        // Dummy node
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode prevGroupEnd = dummy;

        while (true) {
            // Step 1: Check if there are k nodes to reverse
            ListNode kthNode = getKthNode(prevGroupEnd, k);
            if (kthNode == null) break;

            ListNode groupStart = prevGroupEnd.next;
            ListNode groupEnd = kthNode;
            ListNode nextGroupStart = kthNode.next;

            // Step 2: Reverse the k nodes
            ListNode prev = nextGroupStart;
            ListNode curr = groupStart;
            while (curr != nextGroupStart) {
                ListNode temp = curr.next;
                curr.next = prev;
                prev = curr;
                curr = temp;
            }

            // Step 3: Connect previous group with newly reversed group
            prevGroupEnd.next = groupEnd;
            prevGroupEnd = groupStart;
        }

        return dummy.next;
    }

    private ListNode getKthNode(ListNode start, int k) {
        while (start != null && k > 0) {
            start = start.next;
            k--;
        }
        return start;
    }

    // Optional: Test the function
    public static void main(String[] args) {
        ReverseKGroup solution = new ReverseKGroup();

        ListNode node1 = new ListNode(1);
        ListNode node2 = new ListNode(2);
        ListNode node3 = new ListNode(3);
        ListNode node4 = new ListNode(4);
        ListNode node5 = new ListNode(5);

        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node5;

        int k = 2; // Try k = 3 too
        ListNode result = solution.reverseKGroup(node1, k);

        // Print result
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
        // Output for k = 2: 2 1 4 3 5
    }
}
