class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class RotateList {

    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) return head;

        // Step 1: Find the length and tail
        ListNode tail = head;
        int length = 1;
        while (tail.next != null) {
            tail = tail.next;
            length++;
        }

        // Step 2: Form a circular list
        tail.next = head;

        // Step 3: Find new head position
        k = k % length;  // In case k >= length
        int stepsToNewHead = length - k;
        ListNode newTail = tail;

        while (stepsToNewHead-- > 0) {
            newTail = newTail.next;
        }

        // Step 4: Break the cycle and return new head
        ListNode newHead = newTail.next;
        newTail.next = null;

        return newHead;
    }

    // Test the method
    public static void main(String[] args) {
        RotateList rotator = new RotateList();

        ListNode
