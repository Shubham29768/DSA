class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class RemoveNthFromEnd {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Step 1: Create a dummy node to handle edge cases (e.g., removing head)
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        // Step 2: Move fast pointer n+1 steps ahead
        ListNode fast = dummy;
        ListNode slow = dummy;

        for (int i = 0; i <= n; i++) {
            fast = fast.next;
        }

        // Step 3: Move both pointers until fast reaches the end
        while (fast != null) {
            fast = fast.next;
            slow = slow.next;
        }

        // Step 4: Skip the nth node
        slow.next = slow.next.next;

        // Return new head
        return dummy.next;
    }

    // Optional: Test the function
    public static void main(String[] args) {
        RemoveNthFromEnd remover = new RemoveNthFromEnd();

        ListNode node1 = new ListNode(1);
        ListNode node2 = new ListNode(2);
        ListNode node3 = new ListNode(3);
        ListNode node4 = new ListNode(4);
        ListNode node5 = new ListNode(5);

        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node5;

        int n = 2;
        ListNode updatedHead = remover.removeNthFromEnd(node1, n);

        // Print the updated list
        while (updatedHead != null) {
            System.out.print(updatedHead.val + " ");
            updatedHead = updatedHead.next;
        }
        // Output: 1 2 3 5
    }
}
