import java.util.HashMap;

public class LongestSubarraySumEqualsK {

    public static int longestSubarrayWithSumK(int[] nums, int k) {
        HashMap<Integer, Integer> prefixSumMap = new HashMap<>();
        int sum = 0, maxLength = 0;

        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];

            // Case 1: Entire subarray from 0 to i has sum == k
            if (sum == k) {
                maxLength = i + 1;
            }

            // Case 2: Check if there is a previous prefix sum that would make current sum - k
            if (prefixSumMap.containsKey(sum - k)) {
                int prevIndex = prefixSumMap.get(sum - k);
                maxLength = Math.max(maxLength, i - prevIndex);
            }

            // Store the earliest index only
            if (!prefixSumMap.containsKey(sum)) {
                prefixSumMap.put(sum, i);
            }
        }

        return maxLength;
    }

    // Test the function
    public static void main(String[] args) {
        int[] nums1 = {10, 5, 2, 7, 1, 9};
        int k1 = 15;
        System.out.println("Output: " + longestSubarrayWithSumK(nums1, k1)); // Output: 4

        int[] nums2 = {-3, 2, 1};
        int k2 = 6;
        System.out.println("Output: " + longestSubarrayWithSumK(nums2, k2)); // Output: 0
    }
}
