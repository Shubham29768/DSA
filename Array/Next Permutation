import java.util.Arrays;

public class NextPermutation {

    public static void nextPermutation(int[] nums) {
        int n = nums.length;
        int i = n - 2;

        // Step 1: Find the first decreasing element from the right
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }

        // Step 2: If such element is found
        if (i >= 0) {
            int j = n - 1;

            // Step 3: Find element just larger than nums[i]
            while (nums[j] <= nums[i]) {
                j--;
            }

            // Step 4: Swap them
            swap(nums, i, j);
        }

        // Step 5: Reverse the right part
        reverse(nums, i + 1, n - 1);
    }

    // Helper to swap two elements
    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    // Helper to reverse a subarray
    private static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start++, end--);
        }
    }

    // Driver code
    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3};
        nextPermutation(nums1);
        System.out.println("Next Permutation: " + Arrays.toString(nums1));  // [1, 3, 2]

        int[] nums2 = {3, 2, 1};
        nextPermutation(nums2);
        System.out.println("Next Permutation: " + Arrays.toString(nums2));  // [1, 2, 3]

        int[] nums3 = {1, 1, 5};
        nextPermutation(nums3);
        System.out.println("Next Permutation: " + Arrays.toString(nums3));  // [1, 5, 1]
    }
}
