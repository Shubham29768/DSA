import java.util.*;

public class WordLadder {
    
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        
        // Early exit if endWord is not in wordList
        if (!wordSet.contains(endWord)) {
            return 0;
        }
        
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        int level = 1; // Begin from the starting word
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            
            // Process all words at current level
            for (int i = 0; i < size; i++) {
                String word = queue.poll();
                
                // Try changing every character in the word
                for (int j = 0; j < word.length(); j++) {
                    char[] wordChars = word.toCharArray();
                    
                    for (char c = 'a'; c <= 'z'; c++) {
                        wordChars[j] = c;
                        String newWord = new String(wordChars);
                        
                        if (newWord.equals(endWord)) {
                            return level + 1;
                        }
                        
                        if (wordSet.contains(newWord)) {
                            queue.offer(newWord);
                            wordSet.remove(newWord); // Mark as visited
                        }
                    }
                }
            }
            level++;
        }
        
        return 0; // No valid transformation sequence found
    }

    // Example usage
    public static void main(String[] args) {
        WordLadder solver = new WordLadder();
        
        List<String> wordList1 = Arrays.asList("hot","dot","dog","lot","log","cog");
        System.out.println(solver.ladderLength("hit", "cog", wordList1)); // Output: 5
        
        List<String> wordList2 = Arrays.asList("hot","dot","dog","lot","log");
        System.out.println(solver.ladderLength("hit", "cog", wordList2)); // Output: 0
    }
}
