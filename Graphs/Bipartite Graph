import java.util.*;

public class BipartiteGraph {

    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1); // -1 means unvisited

        for (int i = 0; i < n; i++) {
            if (colors[i] == -1) {
                if (!bfsCheck(graph, i, colors)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean bfsCheck(int[][] graph, int start, int[] colors) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        colors[start] = 0; // Start with color 0

        while (!queue.isEmpty()) {
            int node = queue.poll();

            for (int neighbor : graph[node]) {
                if (colors[neighbor] == -1) {
                    // Assign alternate color
                    colors[neighbor] = 1 - colors[node];
                    queue.offer(neighbor);
                } else if (colors[neighbor] == colors[node]) {
                    // Same color on both sides â€“ not bipartite
                    return false;
                }
            }
        }
        return true;
    }

    // Example usage
    public static void main(String[] args) {
        BipartiteGraph solver = new BipartiteGraph();
        
        int[][] graph1 = {{1,2,3}, {0,2}, {0,1,3}, {0,2}};
        System.out.println(solver.isBipartite(graph1)); // Output: false
        
        int[][] graph2 = {{1,3}, {0,2}, {1,3}, {0,2}};
        System.out.println(solver.isBipartite(graph2)); // Output: true
    }
}
