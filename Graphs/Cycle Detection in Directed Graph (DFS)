import java.util.*;

public class CourseScheduleOrder {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        // Step 1: Initialize adjacency list and in-degree array
        List<List<Integer>> graph = new ArrayList<>();
        int[] inDegree = new int[numCourses];

        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }

        // Step 2: Build the graph and fill in-degree
        for (int[] pre : prerequisites) {
            int course = pre[0], prereq = pre[1];
            graph.get(prereq).add(course);
            inDegree[course]++;
        }

        // Step 3: Queue for all courses with in-degree 0
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) queue.offer(i);
        }

        // Step 4: Perform BFS
        List<Integer> order = new ArrayList<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            order.add(curr);

            for (int neighbor : graph.get(curr)) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    queue.offer(neighbor);
                }
            }
        }

        // Step 5: Check if all courses were included
        if (order.size() == numCourses) {
            return order.stream().mapToInt(i -> i).toArray();
        } else {
            return new int[0]; // Cycle detected â€” not possible to finish all courses
        }
    }

    // Example usage
    public static void main(String[] args) {
        CourseScheduleOrder solver = new CourseScheduleOrder();

        int[][] pre1 = {{1, 0}};
        System.out.println(Arrays.toString(solver.findOrder(2, pre1))); // [0, 1]

        int[][] pre2 = {{1, 0}, {2, 0}, {3, 1}, {3, 2}};
        System.out.println(Arrays.toString(solver.findOrder(4, pre2))); // [0,2,1,3] or [0,1,2,3]

        int[][] pre3 = {};
        System.out.println(Arrays.toString(solver.findOrder(1, pre3))); // [0]
    }
}
