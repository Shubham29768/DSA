import java.util.*;

public class SwimInRisingWater {
    public int swimInWater(int[][] grid) {
        int n = grid.length;
        boolean[][] visited = new boolean[n][n];
        PriorityQueue<Cell> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.elevation));
        
        pq.offer(new Cell(0, 0, grid[0][0]));
        int[] dirs = {-1, 0, 1, 0, -1};

        while (!pq.isEmpty()) {
            Cell cell = pq.poll();
            int i = cell.x, j = cell.y, elev = cell.elevation;

            if (i == n - 1 && j == n - 1) {
                return elev;
            }

            if (visited[i][j]) continue;
            visited[i][j] = true;

            for (int d = 0; d < 4; d++) {
                int ni = i + dirs[d];
                int nj = j + dirs[d + 1];
                if (ni >= 0 && nj >= 0 && ni < n && nj < n && !visited[ni][nj]) {
                    pq.offer(new Cell(ni, nj, Math.max(elev, grid[ni][nj])));
                }
            }
        }

        return -1; // Should never reach here
    }

    static class Cell {
        int x, y, elevation;

        Cell(int x, int y, int elevation) {
            this.x = x;
            this.y = y;
            this.elevation = elevation;
        }
    }

    // Main for testing
    public static void main(String[] args) {
        SwimInRisingWater solution = new SwimInRisingWater();

        int[][] grid1 = {{0, 2}, {1, 3}};
        System.out.println(solution.swimInWater(grid1)); // Output: 3

        int[][] grid2 = {
            {0, 1, 2, 3, 4},
            {24, 23, 22, 21, 5},
            {12, 13, 14, 15, 16},
            {11, 17, 18, 19, 20},
            {10, 9, 8, 7, 6}
        };
        System.out.println(solution.swimInWater(grid2)); // Output: 16
    }
}
