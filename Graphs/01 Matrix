import java.util.*;

public class NearestZeroMatrix {

    public int[][] updateMatrix(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;
        Queue<int[]> queue = new LinkedList<>();

        // Step 1: Add all 0s to queue and mark 1s as unvisited (-1)
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    queue.offer(new int[]{i, j});
                } else {
                    mat[i][j] = -1; // mark unvisited
                }
            }
        }

        // Directions: up, down, left, right
        int[][] directions = {{-1,0}, {1,0}, {0,-1}, {0,1}};

        // Step 2: BFS traversal from all 0s
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int row = cell[0], col = cell[1];

            for (int[] d : directions) {
                int newRow = row + d[0];
                int newCol = col + d[1];

                // Only process valid unvisited neighbors
                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && mat[newRow][newCol] == -1) {
                    mat[newRow][newCol] = mat[row][col] + 1;
                    queue.offer(new int[]{newRow, newCol});
                }
            }
        }

        return mat;
    }

    // Test example
    public static void main(String[] args) {
        NearestZeroMatrix solver = new NearestZeroMatrix();

        int[][] mat1 = {{0,0,0},{0,1,0},{0,0,0}};
        int[][] res1 = solver.updateMatrix(mat1);
        print(res1); // [[0,0,0],[0,1,0],[0,0,0]]

        int[][] mat2 = {{0,0,0},{0,1,0},{1,1,1}};
        int[][] res2 = solver.updateMatrix(mat2);
        print(res2); // [[0,0,0],[0,1,0],[1,2,1]]
    }

    private static void print(int[][] mat) {
        for (int[] row : mat) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}
