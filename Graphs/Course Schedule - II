import java.util.*;

public class CourseScheduleOrder {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        // Step 1: Build the graph and in-degree array
        List<List<Integer>> graph = new ArrayList<>();
        int[] inDegree = new int[numCourses];

        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] pre : prerequisites) {
            int course = pre[0];
            int prereq = pre[1];
            graph.get(prereq).add(course); // prereq -> course
            inDegree[course]++;
        }

        // Step 2: Initialize queue with courses having in-degree 0
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) queue.offer(i);
        }

        // Step 3: Perform BFS
        int[] result = new int[numCourses];
        int index = 0;

        while (!queue.isEmpty()) {
            int curr = queue.poll();
            result[index++] = curr;

            for (int neighbor : graph.get(curr)) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) queue.offer(neighbor);
            }
        }

        // Step 4: Check if topological sort includes all courses
        return index == numCourses ? result : new int[0];
    }

    // Main method to test
    public static void main(String[] args) {
        CourseScheduleOrder solver = new CourseScheduleOrder();

        int[][] prereq1 = {{1, 0}};
        System.out.println(Arrays.toString(solver.findOrder(2, prereq1))); // [0, 1]

        int[][] prereq2 = {{1, 0}, {2, 0}, {3, 1}, {3, 2}};
        System.out.println(Arrays.toString(solver.findOrder(4, prereq2))); // [0,1,2,3] or [0,2,1,3]

        int[][] prereq3 = {};
        System.out.println(Arrays.toString(solver.findOrder(1, prereq3))); // [0]
    }
}
