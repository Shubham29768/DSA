import java.util.*;

public class CriticalConnectionsFinder {

    private int time = 0;

    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer>[] graph = new ArrayList[n];
        int[] disc = new int[n]; // discovery time of each node
        int[] low = new int[n];  // lowest time reachable
        Arrays.fill(disc, -1); // mark unvisited

        // Build graph
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (List<Integer> conn : connections) {
            int u = conn.get(0);
            int v = conn.get(1);
            graph[u].add(v);
            graph[v].add(u);
        }

        // DFS from node 0
        dfs(0, -1, disc, low, graph, result);

        return result;
    }

    private void dfs(int u, int parent, int[] disc, int[] low, List<Integer>[] graph, List<List<Integer>> result) {
        disc[u] = low[u] = time++;
        for (int v : graph[u]) {
            if (v == parent) continue; // Skip the parent node
            if (disc[v] == -1) {
                dfs(v, u, disc, low, graph, result);
                low[u] = Math.min(low[u], low[v]);
                // Check for bridge
                if (low[v] > disc[u]) {
                    result.add(Arrays.asList(u, v));
                }
            } else {
                low[u] = Math.min(low[u], disc[v]);
            }
        }
    }

    // Main method for testing
    public static void main(String[] args) {
        CriticalConnectionsFinder finder = new CriticalConnectionsFinder();
        
        int n1 = 4;
        List<List<Integer>> connections1 = Arrays.asList(
            Arrays.asList(0, 1),
            Arrays.asList(1, 2),
            Arrays.asList(2, 0),
            Arrays.asList(1, 3)
        );
        System.out.println("Critical Connections: " + finder.criticalConnections(n1, connections1));

        int n2 = 2;
        List<List<Integer>> connections2 = Arrays.asList(
            Arrays.asList(0, 1)
        );
        System.out.println("Critical Connections: " + finder.criticalConnections(n2, connections2));
    }
}
