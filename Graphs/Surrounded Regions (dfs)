public class SurroundedRegions {

    public void solve(char[][] board) {
        if (board == null || board.length == 0) return;

        int m = board.length;
        int n = board[0].length;

        // Step 1: Mark edge-connected 'O's as 'E'
        for (int i = 0; i < m; i++) {
            dfs(board, i, 0);
            dfs(board, i, n - 1);
        }
        for (int j = 0; j < n; j++) {
            dfs(board, 0, j);
            dfs(board, m - 1, j);
        }

        // Step 2: Flip all remaining 'O's to 'X' (captured)
        // and flip 'E' back to 'O'
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';  // captured
                } else if (board[i][j] == 'E') {
                    board[i][j] = 'O';  // restore
                }
            }
        }
    }

    private void dfs(char[][] board, int r, int c) {
        int m = board.length, n = board[0].length;
        if (r < 0 || r >= m || c < 0 || c >= n || board[r][c] != 'O') return;

        board[r][c] = 'E';  // mark as escaped edge-connected

        dfs(board, r + 1, c);
        dfs(board, r - 1, c);
        dfs(board, r, c + 1);
        dfs(board, r, c - 1);
    }

    // Test example
    public static void main(String[] args) {
        SurroundedRegions sr = new SurroundedRegions();

        char[][] board1 = {
            {'X','X','X','X'},
            {'X','O','O','X'},
            {'X','X','O','X'},
            {'X','O','X','X'}
        };
        sr.solve(board1);
        printBoard(board1);
        // Output:
        // X X X X
        // X X X X
        // X X X X
        // X O X X

        char[][] board2 = {{'X'}};
        sr.solve(board2);
        printBoard(board2);
        // Output:
        // X
    }

    private static void printBoard(char[][] board) {
        for (char[] row : board) {
            for (char c : row) {
                System.out.print(c + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}
