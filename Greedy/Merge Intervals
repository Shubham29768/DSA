import java.util.*;

public class MergeIntervals {
    public int[][] merge(int[][] intervals) {
        if (intervals.length <= 1) return intervals;

        // Step 1: Sort intervals based on start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        List<int[]> result = new ArrayList<>();

        // Step 2: Initialize with the first interval
        int[] current = intervals[0];

        for (int i = 1; i < intervals.length; i++) {
            // Overlapping intervals
            if (intervals[i][0] <= current[1]) {
                current[1] = Math.max(current[1], intervals[i][1]); // Merge
            } else {
                result.add(current);           // No overlap, add current
                current = intervals[i];        // Move to next
            }
        }

        result.add(current); // Add the last interval

        return result.toArray(new int[result.size()][]);
    }

    public static void main(String[] args) {
        MergeIntervals solver = new MergeIntervals();

        int[][] intervals1 = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};
        System.out.println(Arrays.deepToString(solver.merge(intervals1))); // [[1,6],[8,10],[15,18]]

        int[][] intervals2 = {{1, 4}, {4, 5}};
        System.out.println(Arrays.deepToString(solver.merge(intervals2))); // [[1,5]]
    }
}
