class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) { val = x; }
}

public class BSTSearch {
    public TreeNode searchBST(TreeNode root, int val) {
        if (root == null) return null;

        if (root.val == val) return root;
        else if (val < root.val) return searchBST(root.left, val);
        else return searchBST(root.right, val);
    }

    // Optional: Helper to print inorder traversal of the subtree
    public void inorder(TreeNode root) {
        if (root == null) return;
        inorder(root.left);
        System.out.print(root.val + " ");
        inorder(root.right);
    }

    public static void main(String[] args) {
        /*
          Example:
          Input: root = [4,2,7,1,3], val = 2
          Output: [2,1,3]
        */
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(2);
        root.right = new TreeNode(7);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(3);

        BSTSearch solution = new BSTSearch();

        TreeNode subtree = solution.searchBST(root, 2);
        if (subtree != null) {
            solution.inorder(subtree);  // Should print: 1 2 3
        } else {
            System.out.println("[]");
        }

        System.out.println();

        // Search for a non-existing value
        TreeNode subtree2 = solution.searchBST(root, 5);
        if (subtree2 != null) {
            solution.inorder(subtree2);
        } else {
            System.out.println("[]");  // Output: []
        }
    }
}
