class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) { val = x; }
}

public class BSTInsertion {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if (root == null) return new TreeNode(val);

        if (val < root.val) {
            root.left = insertIntoBST(root.left, val);
        } else {
            root.right = insertIntoBST(root.right, val);
        }
        return root;
    }

    // Optional: Inorder print to verify BST structure
    public void inorder(TreeNode root) {
        if (root == null) return;
        inorder(root.left);
        System.out.print(root.val + " ");
        inorder(root.right);
    }

    // Test
    public static void main(String[] args) {
        BSTInsertion solution = new BSTInsertion();

        // Example 1: [4,2,7,1,3], insert 5
        TreeNode root1 = new TreeNode(4);
        root1.left = new TreeNode(2);
        root1.right = new TreeNode(7);
        root1.left.left = new TreeNode(1);
        root1.left.right = new TreeNode(3);

        root1 = solution.insertIntoBST(root1, 5);
        solution.inorder(root1);  // Output should include 5
        System.out.println();

        // Example 2: [40,20,60,10,30,50,70], insert 25
        TreeNode root2 = new TreeNode(40);
        root2.left = new TreeNode(20);
        root2.right = new TreeNode(60);
        root2.left.left = new TreeNode(10);
        root2.left.right = new TreeNode(30);
        root2.right.left = new TreeNode(50);
        root2.right.right = new TreeNode(70);

        root2 = solution.insertIntoBST(root2, 25);
        solution.inorder(root2);  // Output includes 25
        System.out.println();
    }
}
