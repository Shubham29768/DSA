// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class RecoverSwappedBST {

    private TreeNode first = null, second = null, prev = new TreeNode(Integer.MIN_VALUE);

    public void recoverTree(TreeNode root) {
        inorder(root);

        // Swap the values of the two nodes
        if (first != null && second != null) {
            int temp = first.val;
            first.val = second.val;
            second.val = temp;
        }
    }

    // In-order traversal to find misplaced nodes
    private void inorder(TreeNode node) {
        if (node == null) return;

        inorder(node.left);

        if (first == null && prev.val >= node.val) {
            first = prev;
        }
        if (first != null && prev.val >= node.val) {
            second = node;
        }

        prev = node;

        inorder(node.right);
    }

    // Helper: In-order print to test
    public void printInOrder(TreeNode root) {
        if (root == null) return;
        printInOrder(root.left);
        System.out.print(root.val + " ");
        printInOrder(root.right);
    }

    // Test example
    public static void main(String[] args) {
        /*
         Example 1:
         Input: [1,3,null,null,2]
              1
             /
            3
             \
              2
         Should be: [3,1,null,null,2]

         Example 2:
         Input: [3,1,4,null,null,2]
              3
             / \
            1   4
               /
              2
         Should be: [2,1,4,null,null,3]
        */

        // Example 1 setup
        TreeNode root1 = new TreeNode(1);
        root1.left = new TreeNode(3);
        root1.left.right = new TreeNode(2);

        RecoverSwappedBST solution = new RecoverSwappedBST();
        System.out.print("Before: ");
        solution.printInOrder(root1);
        solution.recoverTree(root1);
        System.out.print("\nAfter:  ");
        solution.printInOrder(root1);

        System.out.println();

        // Example 2 setup
        TreeNode root2 = new TreeNode(3);
        root2.left = new TreeNode(1);
        root2.right = new TreeNode(4);
        root2.right.left = new TreeNode(2);

        System.out.print("\nBefore: ");
        solution.printInOrder(root2);
        solution.recoverTree(root2);
        System.out.print("\nAfter:  ");
        solution.printInOrder(root2);
    }
}

