import java.util.*;

public class HandOfStraights {

    public boolean isNStraightHand(int[] hand, int groupSize) {
        if (hand.length % groupSize != 0) return false;

        TreeMap<Integer, Integer> countMap = new TreeMap<>();
        for (int card : hand) {
            countMap.put(card, countMap.getOrDefault(card, 0) + 1);
        }

        while (!countMap.isEmpty()) {
            int first = countMap.firstKey();
            for (int i = 0; i < groupSize; i++) {
                int card = first + i;
                if (!countMap.containsKey(card)) {
                    return false;
                }
                countMap.put(card, countMap.get(card) - 1);
                if (countMap.get(card) == 0) {
                    countMap.remove(card);
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        HandOfStraights hos = new HandOfStraights();

        // Example 1
        int[] hand1 = {1, 2, 3, 6, 2, 3, 4, 7, 8};
        int groupSize1 = 3;
        System.out.println("Output 1: " + hos.isNStraightHand(hand1, groupSize1)); // true

        // Example 2
        int[] hand2 = {1, 2, 3, 4, 5};
        int groupSize2 = 4;
        System.out.println("Output 2: " + hos.isNStraightHand(hand2, groupSize2)); // false
    }
}
