public class GoodDigitStrings {

    static final int MOD = 1_000_000_007;

    public static int countGoodStrings(int n) {
        int evenCount = (n + 1) / 2;  // positions 0,2,4,...
        int oddCount = n / 2;         // positions 1,3,5,...

        long evenChoices = fastPower(5, evenCount);  // 5 choices for even positions
        long oddChoices = fastPower(4, oddCount);    // 4 choices for odd positions

        return (int) ((evenChoices * oddChoices) % MOD);
    }

    // Fast exponentiation (binary exponentiation)
    private static long fastPower(long base, int exp) {
        long result = 1;
        base %= MOD;

        while (exp > 0) {
            if ((exp & 1) == 1) {
                result = (result * base) % MOD;
            }
            base = (base * base) % MOD;
            exp >>= 1;
        }
        return result;
    }

    public static void main(String[] args) {
        System.out.println(countGoodStrings(1));   // Output: 5
        System.out.println(countGoodStrings(4));   // Output: 400
        System.out.println(countGoodStrings(50));  // Output: 564908303
    }
}
