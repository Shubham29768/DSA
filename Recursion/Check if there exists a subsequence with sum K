public class SubsequenceSumExists {

    public static boolean isSubsequenceSumK(int[] nums, int k) {
        int n = nums.length;
        Boolean[][] dp = new Boolean[n + 1][k + 1];
        return isPossible(nums, n, k, dp);
    }

    private static boolean isPossible(int[] nums, int i, int sum, Boolean[][] dp) {
        if (sum == 0) return true;     // Found a valid subsequence
        if (i == 0) return false;      // No elements left to check

        if (dp[i][sum] != null) return dp[i][sum];

        // Exclude current element
        boolean exclude = isPossible(nums, i - 1, sum, dp);

        // Include current element if it is <= sum
        boolean include = false;
        if (nums[i - 1] <= sum) {
            include = isPossible(nums, i - 1, sum - nums[i - 1], dp);
        }

        return dp[i][sum] = include || exclude;
    }

    // Main method to test the function
    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 4, 5};
        int k1 = 8;
        System.out.println(isSubsequenceSumK(nums1, k1) ? "Yes" : "No");  // Output: Yes

        int[] nums2 = {4, 3, 9, 2};
        int k2 = 10;
        System.out.println(isSubsequenceSumK(nums2, k2) ? "Yes" : "No");  // Output: No
    }
}
