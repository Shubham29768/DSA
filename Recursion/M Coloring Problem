import java.util.*;

public class GraphColoring {

    public static boolean graphColoring(List<List<Integer>> graph, int m, int n) {
        int[] color = new int[n]; // color[i] = assigned color (0 if uncolored)

        return solve(0, graph, color, m, n);
    }

    private static boolean solve(int node, List<List<Integer>> graph, int[] color, int m, int n) {
        if (node == n) return true;

        for (int c = 1; c <= m; c++) {
            if (isSafe(node, graph, color, c)) {
                color[node] = c;
                if (solve(node + 1, graph, color, m, n)) return true;
                color[node] = 0; // backtrack
            }
        }

        return false;
    }

    private static boolean isSafe(int node, List<List<Integer>> graph, int[] color, int c) {
        for (int neighbor : graph.get(node)) {
            if (color[neighbor] == c) return false;
        }
        return true;
    }

    // Helper to build the adjacency list from edges
    public static List<List<Integer>> buildGraph(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) graph.add(new ArrayList<>());
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            graph.get(u).add(v);
            graph.get(v).add(u);
        }
        return graph;
    }

    // Main method for testing
    public static void main(String[] args) {
        int N1 = 4, M1 = 3;
        int[][] edges1 = { {0,1}, {1,2}, {2,3}, {3,0}, {0,2} };
        System.out.println("Output: " + graphColoring(buildGraph(N1, edges1), M1, N1)); // true

        int N2 = 3, M2 = 2;
        int[][] edges2 = { {0,1}, {1,2}, {0,2} };
        System.out.println("Output: " + graphColoring(buildGraph(N2, edges2), M2, N2)); // false
    }
}
